import sys
import sqlite3
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QLabel, QLineEdit, QPushButton, 
                            QTableWidget, QTableWidgetItem, QMessageBox,
                            QComboBox, QTabWidget, QHeaderView, QSystemTrayIcon)
from PyQt5.QtCore import Qt, QDateTime
from PyQt5.QtGui import QIcon,QColor
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
import phone
from phone import Phone
from phone_iso3166.country import phone_country

# 数据库初始化
def init_db():
    conn = sqlite3.connect('phone_numbers.db')
    cursor = conn.cursor()

    # 创建表后，添加检查代码
    cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = "189"')
    cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = "135"')

    # 创建固话区号表
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS area_codes (
        code TEXT PRIMARY KEY,
        location TEXT NOT NULL
    )
    ''')
    
    # 创建手机运营商表
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS mobile_operators (
        prefix TEXT PRIMARY KEY,
        operator TEXT NOT NULL,
        province TEXT NOT NULL
    )
    ''')
    
    # 创建手机地区编码表
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS mobile_area_codes (
        code TEXT PRIMARY KEY,
        location TEXT NOT NULL
    )
    ''')
    
    # 创建固话记录表
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS landline_numbers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        full_number TEXT NOT NULL,
        area_code TEXT,
        area_location TEXT,
        user_number TEXT NOT NULL,
        registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 创建手机记录表
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS mobile_numbers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        full_number TEXT NOT NULL,
        operator_prefix TEXT,
        operator_name TEXT,
        area_code TEXT,
        area_location TEXT,
        user_number TEXT NOT NULL,
        registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 固话归属地
    cursor.executemany('INSERT OR IGNORE INTO area_codes (code, location) VALUES (?, ?)', [
        ('00', '国际长途'),
        ('010', '北京市'),
        ('020', '广州市'),
        ('021', '上海市'),
        ('022', '天津市'),
        ('023', '重庆市'),
        ('024', '沈阳市'),
        ('025', '南京市'),
        ('027', '武汉市'),
        ('028', '成都市'),
        ('029', '西安市'),
        ('0310', '邯郸市'),
        ('0311', '石家庄市'),
        ('0312', '保定市'),
        ('0313', '张家口市'),
        ('0314', '承德市'),
        ('0315', '唐山市'),
        ('0316', '廊坊市'),
        ('0317', '沧州市'),
        ('0318', '衡水市'),
        ('0319', '邢台市'),
        ('0335', '秦皇岛市'),
        ('0349', '朔州市'),
        ('0350', '忻州市'),
        ('0351', '太原市'),
        ('0352', '大同市'),
        ('0353', '阳泉市'),
        ('0354', '晋中市'),
        ('0355', '长治市'),
        ('0356', '晋城市'),
        ('0357', '临汾市'),
        ('0358', '吕梁市'),
        ('0359', '运城市'),
        ('0370', '商丘市'),
        ('0371', '郑州市'),
        ('0372', '安阳市'),
        ('0373', '新乡市'),
        ('0374', '许昌市'),
        ('0375', '平顶山市'),
        ('0376', '信阳市'),
        ('0377', '南阳市'),
        ('0379', '洛阳市'),
        ('0391', '焦作市'),
        ('0392', '鹤壁市'),
        ('0393', '濮阳市'),
        ('0394', '周口市'),
        ('0395', '漯河市'),
        ('0396', '驻马店市'),
        ('0398', '三门峡市'),
        ('0410', '铁岭市'),
        ('0411', '大连市'),
        ('0412', '鞍山市'),
        ('0413', '抚顺市'),
        ('0414', '本溪市'),
        ('0415', '丹东市'),
        ('0416', '锦州市'),
        ('0417', '营口市'),
        ('0418', '阜新市'),
        ('0419', '辽阳市'),
        ('0421', '朝阳市'),
        ('0427', '盘锦市'),
        ('0429', '葫芦岛市'),
        ('0431', '长春市'),
        ('0432', '吉林市'),
        ('0433', '延边朝鲜族自治州'),
        ('0434', '四平市'),
        ('0435', '通化市'),
        ('0436', '白城市'),
        ('0437', '辽源市'),
        ('0438', '松原市'),
        ('0439', '白山市'),
        ('0450', '哈尔滨市'),
        ('0451', '哈尔滨市'),
        ('0452', '齐齐哈尔市'),
        ('0453', '牡丹江市'),
        ('0454', '佳木斯市'),
        ('0455', '绥化市'),
        ('0456', '黑河市'),
        ('0457', '大兴安岭地区'),
        ('0458', '伊春市'),
        ('0459', '大庆市'),
        ('0464', '七台河市'),
        ('0467', '鸡西市'),
        ('0468', '鹤岗市'),
        ('0469', '双鸭山市'),
        ('0470', '呼伦贝尔市'),
        ('0471', '呼和浩特市'),
        ('0472', '包头市'),
        ('0473', '乌海市'),
        ('0474', '乌兰察布市'),
        ('0475', '通辽市'),
        ('0476', '赤峰市'),
        ('0477', '鄂尔多斯市'),
        ('0478', '巴彦淖尔市'),
        ('0479', '锡林郭勒盟'),
        ('0482', '兴安盟'),
        ('0483', '阿拉善盟'),
        ('0510', '无锡市'),
        ('0511', '镇江市'),
        ('0512', '苏州市'),
        ('0513', '南通市'),
        ('0514', '扬州市'),
        ('0515', '盐城市'),
        ('0516', '徐州市'),
        ('0517', '淮安市'),
        ('0518', '连云港市'),
        ('0519', '常州市'),
        ('0523', '泰州市'),
        ('0527', '宿迁市'),
        ('0530', '菏泽市'),
        ('0531', '济南市'),
        ('0532', '青岛市'),
        ('0533', '淄博市'),
        ('0534', '德州市'),
        ('0535', '烟台市'),
        ('0536', '潍坊市'),
        ('0537', '济宁市'),
        ('0538', '泰安市'),
        ('0539', '临沂市'),
        ('0543', '滨州市'),
        ('0546', '东营市'),
        ('0550', '滁州市'),
        ('0551', '合肥市'),
        ('0552', '蚌埠市'),
        ('0553', '芜湖市'),
        ('0554', '淮南市'),
        ('0555', '马鞍山市'),
        ('0556', '安庆市'),
        ('0557', '宿州市'),
        ('0558', '阜阳市'),
        ('0559', '黄山市'),
        ('0561', '淮北市'),
        ('0562', '铜陵市'),
        ('0563', '宣城市'),
        ('0564', '六安市'),
        ('0566', '池州市'),
        ('0570', '衢州市'),
        ('0571', '杭州市'),
        ('0572', '湖州市'),
        ('0573', '嘉兴市'),
        ('0574', '宁波市'),
        ('0575', '绍兴市'),
        ('0576', '台州市'),
        ('0577', '温州市'),
        ('0578', '丽水市'),
        ('0579', '金华市'),
        ('0580', '舟山市'),
        ('0591', '福州市'),
        ('0592', '厦门市'),
        ('0593', '宁德市'),
        ('0594', '莆田市'),
        ('0595', '泉州市'),
        ('0596', '漳州市'),
        ('0597', '龙岩市'),
        ('0598', '三明市'),
        ('0599', '南平市'),
        ('0631', '威海市'),
        ('0632', '枣庄市'),
        ('0633', '日照市'),
        ('0634', '莱芜市'),
        ('0635', '聊城市'),
        ('0660', '汕尾市'),
        ('0662', '阳江市'),
        ('0663', '揭阳市'),
        ('0668', '茂名市'),
        ('0691', '西双版纳傣族自治州'),
        ('0692', '德宏傣族景颇族自治州'),
        ('0701', '鹰潭市'),
        ('0710', '襄阳市'),
        ('0711', '鄂州市'),
        ('0712', '孝感市'),
        ('0713', '黄冈市'),
        ('0714', '黄石市'),
        ('0715', '咸宁市'),
        ('0716', '荆州市'),
        ('0717', '宜昌市'),
        ('0718', '恩施土家族苗族自治州'),
        ('0719', '十堰市'),
        ('0722', '随州市'),
        ('0724', '荆门市'),
        ('0728', '仙桃市'),
        ('0730', '岳阳市'),
        ('0731', '长沙市'),
        ('0732', '湘潭市'),
        ('0733', '株洲市'),
        ('0734', '衡阳市'),
        ('0735', '郴州市'),
        ('0736', '常德市'),
        ('0737', '益阳市'),
        ('0738', '娄底市'),
        ('0739', '邵阳市'),
        ('0743', '湘西土家族苗族自治州'),
        ('0744', '张家界市'),
        ('0745', '怀化市'),
        ('0746', '永州市'),
        ('0750', '江门市'),
        ('0751', '韶关市'),
        ('0752', '惠州市'),
        ('0753', '梅州市'),
        ('0754', '汕头市'),
        ('0755', '深圳市'),
        ('0756', '珠海市'),
        ('0757', '佛山市'),
        ('0758', '肇庆市'),
        ('0759', '湛江市'),
        ('0760', '中山市'),
        ('0762', '河源市'),
        ('0763', '清远市'),
        ('0766', '云浮市'),
        ('0768', '潮州市'),
        ('0769', '东莞市'),
        ('0770', '防城港市'),
        ('0771', '南宁市'),
        ('0772', '柳州市'),
        ('0773', '桂林市'),
        ('0774', '梧州市'),
        ('0775', '玉林市'),
        ('0776', '百色市'),
        ('0777', '钦州市'),
        ('0778', '河池市'),
        ('0779', '北海市'),
        ('0790', '新余市'),
        ('0791', '南昌市'),
        ('0792', '九江市'),
        ('0793', '上饶市'),
        ('0794', '抚州市'),
        ('0795', '宜春市'),
        ('0796', '吉安市'),
        ('0797', '赣州市'),
        ('0798', '景德镇市'),
        ('0799', '萍乡市'),
        ('0801', '儋州市'),
        ('0802', '三亚市'),
        ('0803', '三沙市'),
        ('0805', '五指山市'),
        ('0806', '琼海市'),
        ('0807', '文昌市'),
        ('0808', '万宁市'),
        ('0809', '东方市'),
        ('0812', '攀枝花市'),
        ('0813', '自贡市'),
        ('0816', '绵阳市'),
        ('0817', '南充市'),
        ('0818', '达州市'),
        ('0825', '遂宁市'),
        ('0826', '广安市'),
        ('0827', '巴中市'),
        ('0830', '泸州市'),
        ('0831', '宜宾市'),
        ('0832', '内江市'),
        ('0833', '乐山市'),
        ('0834', '凉山彝族自治州'),
        ('0835', '雅安市'),
        ('0836', '甘孜藏族自治州'),
        ('0837', '阿坝藏族羌族自治州'),
        ('0838', '德阳市'),
        ('0839', '广元市'),
        ('0851', '贵阳市'),
        ('0852', '遵义市'),
        ('0853', '安顺市'),
        ('0854', '黔南布依族苗族自治州'),
        ('0855', '黔东南苗族侗族自治州'),
        ('0856', '铜仁市'),
        ('0857', '毕节市'),
        ('0858', '六盘水市'),
        ('0859', '黔西南布依族苗族自治州'),
        ('0870', '昭通市'),
        ('0871', '昆明市'),
        ('0872', '大理白族自治州'),
        ('0873', '红河哈尼族彝族自治州'),
        ('0874', '曲靖市'),
        ('0875', '保山市'),
        ('0876', '文山壮族苗族自治州'),
        ('0877', '玉溪市'),
        ('0878', '楚雄彝族自治州'),
        ('0879', '普洱市'),
        ('0883', '临沧市'),
        ('0886', '怒江傈僳族自治州'),
        ('0887', '迪庆藏族自治州'),
        ('0888', '丽江市'),
        ('0891', '拉萨市'),
        ('0892', '日喀则市'),
        ('0893', '山南市'),
        ('0894', '林芝市'),
        ('0895', '昌都市'),
        ('0896', '那曲市'),
        ('0897', '阿里地区'),
        ('0898', '海口市'),
        ('0911', '延安市'),
        ('0912', '榆林市'),
        ('0913', '渭南市'),
        ('0914', '商洛市'),
        ('0915', '安康市'),
        ('0916', '汉中市'),
        ('0917', '宝鸡市'),
        ('0919', '铜川市'),
        ('0930', '临夏回族自治州'),
        ('0931', '兰州市'),
        ('0932', '定西市'),
        ('0933', '平凉市'),
        ('0934', '庆阳市'),
        ('0935', '武威市'),
        ('0936', '张掖市'),
        ('0937', '酒泉市'),
        ('0938', '天水市'),
        ('0939', '陇南市'),
        ('0941', '甘南藏族自治州'),
        ('0943', '白银市'),
        ('0951', '银川市'),
        ('0952', '石嘴山市'),
        ('0953', '吴忠市'),
        ('0954', '固原市'),
        ('0955', '中卫市'),
        ('0970', '海北藏族自治州'),
        ('0971', '西宁市'),
        ('0972', '海东市'),
        ('0973', '黄南藏族自治州'),
        ('0974', '海南藏族自治州'),
        ('0975', '果洛藏族自治州'),
        ('0976', '玉树藏族自治州'),
        ('0977', '海西蒙古族藏族自治州'),
        ('0979', '格尔木市'),
        ('0990', '克拉玛依市'),
        ('0991', '乌鲁木齐市'),
        ('0992', '奎屯市'),
        ('0993', '石河子市'),
        ('0994', '昌吉回族自治州'),
        ('0995', '吐鲁番市'),
        ('0996', '巴音郭楞蒙古自治州'),
        ('0997', '阿克苏地区'),
        ('0998', '喀什地区'),
        ('0999', '伊犁哈萨克自治州'),
        ('852', '香港'),
        ('853', '澳门'),
        ('871', '云南省'),
        ('891', '西藏自治区'),
        ('898', '海南省'),
        ('95', '全国统一服务号码'),
        ('96', '省级服务号码'),
        ('400', '全国统一客服号码'),
        ('800', '全国统一免费电话'),
        # ====== 国内特殊服务号 ======
        # 紧急服务
        ('110', '报警服务'),
        ('119', '火警服务'),
        ('120', '急救中心'),
        ('122', '交通事故报警'),
        ('999', '紧急救援（部分城市）'),
        
        # 政府服务热线
        ('12345', '政务服务便民热线'),
        ('12315', '消费者投诉热线'),
        ('12333', '人力资源和社会保障服务'),
        ('12348', '法律援助热线'),
        ('12369', '环保举报热线'),
        ('12320', '卫生热线'),
        ('12345', '政务服务便民热线'),
        ('12315', '消费者投诉热线'),
        ('12333', '人力资源和社会保障服务'),
        ('12348', '法律援助热线'),
        ('12369', '环保举报热线'),
        ('12320', '卫生热线'),
        ('12301', '国家旅游服务热线'),
        ('12305', '邮政业消费者申诉热线'),
        ('12306', '铁路客户服务热线'),
        ('12308', '外交部全球领事保护与服务应急热线'),
        ('12309', '检察服务热线'),
        ('12310', '机构编制违规举报热线'),
        ('12312', '商务举报投诉热线'),
        ('12313', '烟草专卖品市场监管举报热线'),
        ('12316', '三农服务热线'),
        ('12317', '扶贫监督举报热线'),
        ('12318', '文化市场举报热线'),
        ('12319', '住房城乡建设服务热线'),
        ('12321', '网络不良与垃圾信息举报热线'),
        ('12322', '防震减灾公益服务热线'),
        ('12325', '粮食流通监管热线'),
        ('12326', '民航服务质量监督电话'),
        ('12328', '交通运输服务监督热线'),
        ('12329', '住房公积金热线'),
        ('12330', '知识产权维权援助与举报投诉热线'),
        ('12331', '食品药品投诉举报热线'),
        ('12336', '自然资源违法举报热线'),
        ('12338', '妇女维权服务热线'),
        ('12339', '国家安全机关举报受理热线'),
        ('12340', '社情民意调查热线'),
        ('12349', '社区服务热线'),
        ('12350', '安全生产举报投诉热线'),
        ('12351', '工会服务职工热线'),
        ('12355', '青少年服务台'),
        ('12358', '价格举报热线'),
        ('12360', '海关服务热线'),
        ('12361', '儿童慈善募捐专线'),
        ('12363', '金融消费权益保护咨询投诉热线'),
        ('12365', '质量技术监督热线'),
        ('12366', '纳税服务热线'),
        ('12368', '诉讼服务热线'),
        ('12371', '党员咨询服务热线'),
        ('12377', '互联网违法和不良信息举报中心'),
        ('12378', '保险消费者投诉维权热线'),
        ('12380', '组织系统举报电话'),
        ('12385', '残疾人服务热线'),
        ('12386', '证监会热线'),
        ('12388', '纪检监察举报热线'),
        ('12389', '公安机关和民警违法违纪举报热线'),
        ('12390', '扫黄打非举报热线'),
        ('12393', '医疗保障服务热线'),
        ('12395', '水上遇险求救电话'),
        ('12396', '科技公益服务热线'),
        ('12398', '能源监管热线'),

        
        # 全国统一客服短号（95XXX）
        ('95588', '工商银行'),
        ('95599', '农业银行'),
        ('95566', '中国银行'),
        ('95533', '建设银行'),
        ('95555', '招商银行'),
        ('95558', '中信银行'),
        ('95559', '交通银行'),
        ('95528', '浦发银行'),
        ('95580', '邮政储蓄银行'),
        ('95595', '光大银行'),
        ('95501', '深圳发展银行'),
        ('95558', '中信银行'),
        ('95561', '兴业银行'),
        ('95566', '中国银行'),
        ('95568', '民生银行'),
        ('95508', '广发银行'),
        ('95577', '华夏银行'),
        ('95510', '平安保险'),
        ('95518', '人保财险'),
        ('95511', '中国平安'),
        ('95500', '太平洋保险'),
        ('95522', '泰康保险'),
        ('95580', '邮政储蓄银行'),
        ('95585', '中华保险'),
        ('95588', '工商银行'),
        ('95589', '太平保险'),
        ('95590', '大地保险'),
        ('95585', '中华保险'),
        ('95595', '光大银行'),
        ('95596', '恒丰银行'),
        ('95597', '浙商银行'),
        ('95598', '国家电网'),

        ('95501', '深圳发展银行'),
        ('95502', '安邦保险'),
        ('95503', '渤海银行'),
        ('95504', '北京银行'),
        ('95505', '上海银行'),
        ('95506', '华安保险'),
        ('95507', '阳光保险'),
        ('95508', '广发银行'),
        ('95509', '华泰保险'),
        ('95510', '平安保险'),
        ('95511', '中国平安'),
        ('95512', '太平洋保险'),
        ('95513', '国泰君安证券'),
        ('95514', '国信证券'),
        ('95515', '海通证券'),
        ('95516', '中国银联'),
        ('95518', '人保财险'),
        ('95519', '中国人寿'),
        ('95520', '中国民航'),
        ('95522', '泰康保险'),
        ('95523', '申万宏源证券'),
        ('95526', '民生银行'),
        ('95528', '浦发银行'),
        ('95529', '华泰证券'),
        ('95530', '东方航空'),
        ('95531', '南京银行'),
        ('95533', '建设银行'),
        ('95536', '兴业证券'),
        ('95537', '哈尔滨银行'),
        ('95538', '广州银行'),
        ('95539', '南方航空'),
        ('95541', '宁波银行'),
        ('95543', '申通快递'),
        ('95546', '圆通速递'),
        ('95548', '中信证券'),
        ('95549', '国元证券'),
        ('95550', '天安保险'),
        ('95551', '银河证券'),
        ('95553', '齐鲁证券'),
        ('95555', '招商银行'),
        ('95556', '华安证券'),
        ('95557', '厦门航空'),
        ('95558', '中信银行'),
        ('95559', '交通银行'),
        ('95560', '安华保险'),
        ('95561', '兴业银行'),
        ('95562', '光大证券'),
        ('95563', '东海证券'),
        ('95566', '中国银行'),
        ('95567', '新华保险'),
        ('95568', '民生银行'),
        ('95569', '安邦保险'),
        ('95571', '方正证券'),
        ('95572', '信达证券'),
        ('95575', '广发证券'),
        ('95577', '华夏银行'),
        ('95579', '长江证券'),
        ('95580', '邮政储蓄银行'),
        ('95582', '昆仑银行'),
        ('95583', '中国国航'),
        ('95585', '中华保险'),
        ('95588', '工商银行'),
        ('95589', '太平保险'),
        ('95590', '大地保险'),
        ('95591', '昆仑保险'),
        ('95593', '中国邮政航空'),
        ('95595', '光大银行'),
        ('95596', '恒丰银行'),
        ('95597', '浙商银行'),
        ('95598', '国家电网'),


        # 其他特殊服务号
        ('95188', '支付宝客服'),
        ('952116', '中国电信增值业务'),
        ('952492', '中国移动增值业务'),
        ('952499', '中国联通增值业务'),
        ('95338', '顺丰速运'),
        ('95353', '韵达快递'),
        ('95543', '申通快递'),
        ('95546', '圆通速递'),
        ('95161', '圆通速递'),
        ('95554', '中通快递'),
        ('95720', '中通快递'),
        ('956025', '京东物流'),
        ('956056', '德邦快递'),

        # 国际接入号
        ('950', '国际接入号'),
        ('951', '国际接入号'),
        ('952', '国际接入号'),
        ('953', '国际接入号'),
        ('954', '国际接入号'),
        ('955', '国际接入号'),
        ('956', '国际接入号'),
        ('957', '国际接入号'),
        ('958', '国际接入号'),
        ('959', '国际接入号'),

        # 省级服务短号（96XXX）
        ('96110', '反电信网络诈骗专用号码'),
        ('96120', '公共卫生公益电话'),
        ('96121', '气象服务电话'),
        ('96196', '电力服务热线'),
        ('96296', '广电客服热线'),
        ('96315', '消费者投诉热线'),
        ('96345', '市民服务热线'),
        ('96588', '农村信用社'),
        ('96688', '银联客服'),
        ('96777', '高速公路服务热线'),
        ('96888', '中国银联'),
        ('96998', '社保服务热线'),
        ('96789', '全国统一社保服务热线'),
        ('96788', '银联商务客服'),
        ('96799', '邮政快递客服'),
        ('96701', '中国电信增值业务'),
        ('96702', '中国移动增值业务'),
        ('96703', '中国联通增值业务'),
        ('96755', '交通违章查询'),
        ('96766', '银行客服（部分商业银行）'),
        ('96780', '航空服务热线'),
        ('96790', '铁路客服备用号'),

        # 96开头的其他服务号
        ('960', '企业客服号码前缀'),
        ('961', '省级服务号码前缀'),
        ('962', '省级服务号码前缀'),
        ('963', '省级服务号码前缀'),
        ('964', '省级服务号码前缀'),
        ('965', '省级服务号码前缀'),
        ('966', '省级服务号码前缀'),
        ('967', '省级服务号码前缀'),
        ('968', '省级服务号码前缀'),
        ('969', '省级服务号码前缀'),

        ('9500', '中国银联客服'),
        ('9501', '中国电信客服'),
        ('9502', '中国移动客服'),
        ('9503', '中国联通客服'),
        ('9504', '中国铁通客服'),
        ('9505', '中国网通客服'),
        ('9506', '中国卫通客服'),
        ('9507', '中国铁塔客服'),
        ('9508', '中国广电客服'),
        ('9509', '中国邮政客服'),
        ('9510', '顺丰速运客服'),
        ('9511', '中通快递客服'),
        ('9512', '圆通速递客服'),
        ('9513', '申通快递客服'),
        ('9514', '韵达快递客服'),
        ('9515', '天天快递客服'),
        ('9516', 'EMS客服'),
        ('9517', '宅急送客服'),
        ('9518', '德邦物流客服'),
        ('9519', '百世快递客服'),
        ('9520', '京东物流客服'),
        ('9521', '苏宁物流客服'),
        ('9522', '国美客服'),
        ('9523', '阿里巴巴客服'),
        ('9524', '淘宝客服'),
        ('9525', '天猫客服'),
        ('9526', '京东客服'),
        ('9527', '拼多多客服'),
        ('9528', '唯品会客服'),
        ('9529', '美团客服'),
        ('9530', '滴滴出行客服'),
        ('9531', '神州专车客服'),
        ('9532', '首汽约车客服'),
        ('9533', '曹操出行客服'),
        ('9534', '哈啰出行客服'),
        ('9535', '摩拜单车客服'),
        ('9536', 'OFO小黄车客服'),
        ('9537', '青桔单车客服'),
        ('9538', '支付宝客服'),
        ('9539', '微信支付客服'),
        ('9540', '银联云闪付客服'),
        ('9541', '中国银行信用卡客服'),
        ('9542', '工商银行信用卡客服'),
        ('9543', '建设银行信用卡客服'),
        ('9544', '农业银行信用卡客服'),
        ('9545', '交通银行信用卡客服'),
        ('9546', '招商银行信用卡客服'),
        ('9547', '中信银行信用卡客服'),
        ('9548', '光大银行信用卡客服'),
        ('9549', '民生银行信用卡客服'),
        ('9550', '平安银行信用卡客服'),
        ('9551', '浦发银行信用卡客服'),
        ('9552', '广发银行信用卡客服'),
        ('9553', '华夏银行信用卡客服'),
        ('9554', '兴业银行信用卡客服'),
        ('9555', '北京银行信用卡客服'),
        ('9556', '上海银行信用卡客服'),
        ('9557', '江苏银行信用卡客服'),
        ('9558', '浙商银行信用卡客服'),
        ('9559', '渤海银行信用卡客服'),
        ('9560', '恒丰银行信用卡客服'),
        ('9561', '中国银联商务客服'),
        ('9562', '拉卡拉客服'),
        ('9563', '通联支付客服'),
        ('9564', '快钱支付客服'),
        ('9565', '易宝支付客服'),
        ('9566', '汇付天下客服'),
        ('9567', '宝付支付客服'),
        ('9568', '翼支付客服'),
        ('9569', '和包支付客服'),
        ('9570', '沃支付客服'),
        ('9571', '天翼电子商务客服'),
        ('9572', '联动优势客服'),
        ('9573', '易生支付客服'),
        ('9574', '现代金控客服'),
        ('9575', '随行付客服'),
        ('9576', '乐刷客服'),
        ('9577', '付临门客服'),
        ('9578', '点佰趣客服'),
        ('9579', '嘉联支付客服'),
        ('9580', '国通星驿客服'),
        ('9581', '海科融通客服'),
        ('9582', '银盛支付客服'),
        ('9583', '开店宝客服'),
        ('9584', '瑞银信客服'),
        ('9585', '中付支付客服'),
        ('9586', '钱宝科技客服'),
        ('9587', '盛付通客服'),
        ('9588', '汇潮支付客服'),
        ('9589', '新生支付客服'),
        ('9590', '快捷通客服'),
        ('9591', '易极付客服'),
        ('9592', '得仕客服'),
        ('9593', '付费通客服'),
        ('9594', '汇付宝客服'),
        ('9595', '网易宝客服'),
        ('9596', '京东支付客服'),
        ('9597', '苏宁支付客服'),
        ('9598', '国付宝客服'),
        ('9599', '环迅支付客服'),
        ('95188', '支付宝客服'),
        ('95189', '财付通客服'),
        ('95190', '快钱支付客服'),
        ('95191', '易宝支付客服'),
        ('95192', '汇付天下客服'),
        ('95193', '宝付支付客服'),
        ('95194', '翼支付客服'),
        ('95195', '和包支付客服'),
        ('95196', '沃支付客服'),
        ('95197', '天翼电子商务客服'),
        ('95198', '联动优势客服'),
        ('95199', '易生支付客服'),
        ('95200', '现代金控客服'),
        ('95201', '随行付客服'),
        ('95202', '乐刷客服'),
        ('95203', '付临门客服'),
        ('95204', '点佰趣客服'),
        ('95205', '嘉联支付客服'),
        ('95206', '国通星驿客服'),
        ('95207', '海科融通客服'),
        ('95208', '银盛支付客服'),
        ('95209', '开店宝客服'),
        ('95210', '瑞银信客服'),
        ('95211', '中付支付客服'),
        ('95212', '钱宝科技客服'),
        ('95213', '盛付通客服'),
        ('95214', '汇潮支付客服'),
        ('95215', '新生支付客服'),
        ('95216', '快捷通客服'),
        ('95217', '易极付客服'),
        ('95218', '得仕客服'),
        ('95219', '付费通客服'),
        ('95220', '汇付宝客服'),
        ('95221', '网易宝客服'),
        ('95222', '京东支付客服'),
        ('95223', '苏宁支付客服'),
        ('95224', '国付宝客服'),
        ('95225', '环迅支付客服'),
        ('95226', '支付宝备用客服'),
        ('95227', '财付通备用客服'),
        ('95228', '快钱支付备用客服'),
        ('95229', '易宝支付备用客服'),
        ('95230', '汇付天下备用客服'),
        ('95231', '宝付支付备用客服'),
        ('95232', '翼支付备用客服'),
        ('95233', '和包支付备用客服'),
        ('95234', '沃支付备用客服'),
        ('95235', '天翼电子商务备用客服'),
        ('95236', '联动优势备用客服'),
        ('95237', '易生支付备用客服'),
        ('95238', '现代金控备用客服'),
        ('95239', '随行付备用客服'),
        ('95240', '乐刷备用客服'),
        ('95241', '付临门备用客服'),
        ('95242', '点佰趣备用客服'),
        ('95243', '嘉联支付备用客服'),
        ('95244', '国通星驿备用客服'),
        ('95245', '海科融通备用客服'),
        ('95246', '银盛支付备用客服'),
        ('95247', '开店宝备用客服'),
        ('95248', '瑞银信备用客服'),
        ('95249', '中付支付备用客服'),
        ('95250', '钱宝科技备用客服'),
        ('95251', '盛付通备用客服'),
        ('95252', '汇潮支付备用客服'),
        ('95253', '新生支付备用客服'),
        ('95254', '快捷通备用客服'),
        ('95255', '易极付备用客服'),
        ('95256', '得仕备用客服'),
        ('95257', '付费通备用客服'),
        ('95258', '汇付宝备用客服'),
        ('95259', '网易宝备用客服'),
        ('95260', '京东支付备用客服'),
        ('95261', '苏宁支付备用客服'),
        ('95262', '国付宝备用客服'),
        ('95263', '环迅支付备用客服'),
        ('95264', '支付宝企业客服'),
        ('95265', '财付通企业客服'),
        ('95266', '快钱支付企业客服'),
        ('95267', '易宝支付企业客服'),
        ('95268', '汇付天下企业客服'),
        ('95269', '宝付支付企业客服'),
        ('95270', '翼支付企业客服'),
        ('95271', '和包支付企业客服'),
        ('95272', '沃支付企业客服'),
        ('95273', '天翼电子商务企业客服'),
        ('95274', '联动优势企业客服'),
        ('95275', '易生支付企业客服'),
        ('95276', '现代金控企业客服'),
        ('95277', '随行付企业客服'),
        ('95278', '乐刷企业客服'),
        ('95279', '付临门企业客服'),
        ('95280', '点佰趣企业客服'),
        ('95281', '嘉联支付企业客服'),
        ('95282', '国通星驿企业客服'),
        ('95283', '海科融通企业客服'),
        ('95284', '银盛支付企业客服'),
        ('95285', '开店宝企业客服'),
        ('95286', '瑞银信企业客服'),
        ('95287', '中付支付企业客服'),
        ('95288', '钱宝科技企业客服'),
        ('95289', '盛付通企业客服'),
        ('95290', '汇潮支付企业客服'),
        ('95291', '新生支付企业客服'),
        ('95292', '快捷通企业客服'),
        ('95293', '易极付企业客服'),
        ('95294', '得仕企业客服'),
        ('95295', '付费通企业客服'),
        ('95296', '汇付宝企业客服'),
        ('95297', '网易宝企业客服'),
        ('95298', '京东支付企业客服'),
        ('95299', '苏宁支付企业客服'),

        # 12开头的特殊服务号码
        ('120', '急救中心'),
        ('122', '交通事故报警'),
        ('121', '天气预报'),
        ('12110', '短信报警'),
        ('12114', '信息名址'),
        ('12117', '报时服务'),
        ('12119', '森林火警'),
        ('12121', '天气预报'),
        ('12122', '高速公路救援'),

        # 12开头的政务服务热线
        ('12306', '铁路客服'),
        ('12315', '消费者投诉'),
        ('12320', '卫生热线'),
        ('12345', '政务服务'),
        ('12348', '法律援助'),
        ('12333', '社保服务'),

        # 12开头的其他服务号码
        ('121', '天气预报'),
        ('12110', '短信报警'),
        ('12114', '信息名址'),
        ('12117', '报时服务'),
        ('12119', '森林火警'),
        ('12121', '天气预报'),
        ('12122', '高速公路救援'),
        ('12301', '旅游服务'),
        ('12305', '邮政申诉'),
        ('12308', '领事保护'),
        ('12309', '检察服务'),
        ('12312', '商务举报'),
        ('12316', '三农服务'),
        ('12317', '扶贫监督'),
        ('12318', '文化举报'),
        ('12319', '城建服务'),
        ('12321', '网络举报'),
        ('12322', '防震减灾'),
        ('12328', '交通服务'),
        ('12329', '公积金服务'),
        ('12330', '知识产权'),
        ('12331', '食药举报'),
        ('12333', '社保服务'),
        ('12336', '国土举报'),
        ('12338', '妇女维权'),
        ('12339', '国安举报'),
        ('12340', '社情民意'),
        ('12349', '社区服务'),
        ('12350', '安全生产'),
        ('12351', '工会服务'),
        ('12355', '青少年服务'),
        ('12358', '价格举报'),
        ('12360', '海关服务'),
        ('12361', '儿童慈善'),
        ('12363', '金融消费'),
        ('12365', '质检服务'),
        ('12366', '税务服务'),
        ('12368', '诉讼服务'),
        ('12369', '环保举报'),
        ('12371', '党员服务'),
        ('12377', '网络举报'),
        ('12378', '保险投诉'),
        ('12380', '组织举报'),
        ('12385', '残疾人服务'),
        ('12386', '证监会热线'),
        ('12388', '纪委举报'),
        ('12389', '公安举报'),
        ('12390', '扫黄打非'),
        ('12393', '医保服务'),
        ('12395', '水上求救'),
        ('12396', '科技服务'),
        ('12398', '能源监管'),

        ('10096', '中国广电-官方客服热线'),
        ('10086', '中国移动'),
        ('10010', '中国联通'),
        ('10000', '中国电信'),


        # ====== 虚拟运营商号段 ======
        ('162', '虚拟运营商'),
        ('165', '虚拟运营商'),
        ('167', '虚拟运营商'),
        ('1700', '虚拟运营商-中国电信'),
        ('1701', '虚拟运营商-中国电信'),
        ('1702', '虚拟运营商-中国电信'),
        ('1703', '虚拟运营商-中国移动'),
        ('1704', '虚拟运营商-中国移动'),
        ('1705', '虚拟运营商-中国移动'),
        ('1706', '虚拟运营商-中国联通'),
        ('1707', '虚拟运营商-中国联通'),
        ('1708', '虚拟运营商-中国联通'),
        ('1709', '虚拟运营商-中国联通'),
        ('171', '虚拟运营商'),
        ('1718', '虚拟运营商-中国电信'),
        ('1719', '虚拟运营商-中国电信'),
        
        # ====== 物联网专用号段 ======
        ('1440', '物联网-中国电信'),
        ('1441', '物联网-中国移动'),
        ('1442', '物联网-中国联通'),
        ('1480', '物联网-中国电信'),
        ('1481', '物联网-中国移动'),
        ('1482', '物联网-中国联通'),
        
        # ====== 其他公共服务 ======
        ('400', '全国企业客服号码（需完整8-10位）'),
        ('800', '全国企业免费号码（需完整8-10位）'),
        ('106', '短消息服务号（需完整8位）')
    ])

    
    cursor.executemany('INSERT OR IGNORE INTO mobile_operators (prefix, operator, province) VALUES (?, ?, ?)', [
        ('134', '中国移动', '全国'),
        ('135', '中国移动', '全国'),
        ('136', '中国移动', '全国'),
        ('137', '中国移动', '全国'),
        ('138', '中国移动', '全国'),
        ('139', '中国移动', '全国'),
        ('150', '中国移动', '全国'),
        ('151', '中国移动', '全国'),
        ('152', '中国移动', '全国'),
        ('157', '中国移动', '全国'),
        ('158', '中国移动', '全国'),
        ('159', '中国移动', '全国'),
        ('182', '中国移动', '全国'),
        ('183', '中国移动', '全国'),
        ('184', '中国移动', '全国'),
        ('187', '中国移动', '全国'),
        ('188', '中国移动', '全国'),
        ('130', '中国联通', '全国'),
        ('131', '中国联通', '全国'),
        ('132', '中国联通', '全国'),
        ('155', '中国联通', '全国'),
        ('156', '中国联通', '全国'),
        ('185', '中国联通', '全国'),
        ('186', '中国联通', '全国'),
        ('145', '中国联通', '全国'),
        ('176', '中国联通', '全国'),
        ('166', '中国联通', '全国'),
        ('170', '中国联通', '全国'),
        ('171', '中国联通', '全国'),
        ('133', '中国电信', '全国'),
        ('149', '中国电信', '全国'),
        ('153', '中国电信', '全国'),
        ('173', '中国电信', '全国'),
        ('177', '中国电信', '全国'),
        ('180', '中国电信', '全国'),
        ('181', '中国电信', '全国'),
        ('189', '中国电信', '全国'),
        ('191', '中国电信', '全国'),
        ('199', '中国电信', '全国'),
        
        # 新增中国移动号段
        ('147', '中国移动', '全国'),
        ('178', '中国移动', '全国'),
        ('198', '中国移动', '全国'),
        
        # 新增中国联通号段
        ('175', '中国联通', '全国'),
        ('185', '中国联通', '全国'),
        ('186', '中国联通', '全国'),
        
        # 新增中国电信号段
        ('174', '中国电信', '全国'),
        ('190', '中国电信', '全国'),
        ('193', '中国电信', '全国'),
        ('195', '中国电信', '全国'),
        ('197', '中国电信', '全国'),
        
        # 虚拟运营商号段
        ('162', '虚拟运营商', '全国'),
        ('165', '虚拟运营商', '全国'),
        ('167', '虚拟运营商', '全国'),
        ('1700', '虚拟运营商', '全国'),
        ('1701', '虚拟运营商', '全国'),
        ('1702', '虚拟运营商', '全国'),
        ('1703', '虚拟运营商', '全国'),
        ('1704', '虚拟运营商', '全国'),
        ('1705', '虚拟运营商', '全国'),
        ('1706', '虚拟运营商', '全国'),
        ('1707', '虚拟运营商', '全国'),
        ('1708', '虚拟运营商', '全国'),
        ('1709', '虚拟运营商', '全国'),
        ('1718', '虚拟运营商', '全国'),
        ('1719', '虚拟运营商', '全国'),

        ('9670', '虚拟运营商-民生通信', '全国'),
        ('9671', '虚拟运营商-小米移动', '全国'),
        ('9672', '虚拟运营商-阿里通信', '全国'),
        ('9673', '虚拟运营商-京东通信', '全国'),
        ('9674', '虚拟运营商-苏宁互联', '全国'),
        ('9675', '虚拟运营商-迪信通', '全国'),
        ('9676', '物联网-中国移动', '全国'),
        ('9677', '物联网-中国联通', '全国'),
        ('9678', '物联网-中国电信', '全国'),
        ('9679', '虚拟运营商-国美极信', '全国'),

        # 物联网专用号段
        ('144', '物联网', '全国'),
        ('146', '物联网', '全国'),
        ('148', '物联网', '全国'),
        ('149', '物联网', '全国'),
        
        # 广电号段
        ('192', '中国广电', '全国')
    ])

    
    cursor.executemany('INSERT OR IGNORE INTO mobile_area_codes (code, location) VALUES (?, ?)', [
        # 直辖市
        ('1000', '北京'),
        ('2000', '上海'),
        ('3000', '天津'),
        ('4000', '重庆'),
        
        # 广东省
        ('5000', '广东'),
        ('5010', '广州'),
        ('5020', '深圳'),
        ('5030', '珠海'),
        ('5040', '汕头'),
        ('5050', '佛山'),
        ('5060', '韶关'),
        ('5070', '湛江'),
        ('5080', '肇庆'),
        ('5090', '江门'),
        ('5100', '茂名'),
        ('5110', '惠州'),
        ('5120', '梅州'),
        ('5130', '汕尾'),
        ('5140', '河源'),
        ('5150', '阳江'),
        ('5160', '清远'),
        ('5170', '东莞'),
        ('5180', '中山'),
        ('5190', '潮州'),
        ('5200', '揭阳'),
        ('5210', '云浮'),
        
        # 江苏省
        ('5300', '江苏'),
        ('5310', '南京'),
        ('5320', '无锡'),
        ('5330', '徐州'),
        ('5340', '常州'),
        ('5350', '苏州'),
        ('5360', '南通'),
        ('5370', '连云港'),
        ('5380', '淮安'),
        ('5390', '盐城'),
        ('5400', '扬州'),
        ('5410', '镇江'),
        ('5420', '泰州'),
        ('5430', '宿迁'),
        
        # 浙江省
        ('5500', '浙江'),
        ('5510', '杭州'),
        ('5520', '宁波'),
        ('5530', '温州'),
        ('5540', '嘉兴'),
        ('5550', '湖州'),
        ('5560', '绍兴'),
        ('5570', '金华'),
        ('5580', '衢州'),
        ('5590', '舟山'),
        ('5600', '台州'),
        ('5610', '丽水'),
        
        # 福建省
        ('5700', '福建'),
        ('5710', '福州'),
        ('5720', '厦门'),
        ('5730', '莆田'),
        ('5740', '三明'),
        ('5750', '泉州'),
        ('5760', '漳州'),
        ('5770', '南平'),
        ('5780', '龙岩'),
        ('5790', '宁德'),
        
        # 湖南省
        ('5800', '湖南'),
        ('5810', '长沙'),
        ('5820', '株洲'),
        ('5830', '湘潭'),
        ('5840', '衡阳'),
        ('5850', '邵阳'),
        ('5860', '岳阳'),
        ('5870', '常德'),
        ('5880', '张家界'),
        ('5890', '益阳'),
        ('5900', '郴州'),
        ('5910', '永州'),
        ('5920', '怀化'),
        ('5930', '娄底'),
        ('5940', '湘西'),
        
        # 湖北省
        ('6000', '湖北'),
        ('6010', '武汉'),
        ('6020', '黄石'),
        ('6030', '十堰'),
        ('6040', '宜昌'),
        ('6050', '襄阳'),
        ('6060', '鄂州'),
        ('6070', '荆门'),
        ('6080', '孝感'),
        ('6090', '荆州'),
        ('6100', '黄冈'),
        ('6110', '咸宁'),
        ('6120', '随州'),
        ('6130', '恩施'),
        ('6140', '仙桃'),
        ('6150', '潜江'),
        ('6160', '天门'),
        ('6170', '神农架'),
        
        # 河南省
        ('6200', '河南'),
        ('6210', '郑州'),
        ('6220', '开封'),
        ('6230', '洛阳'),
        ('6240', '平顶山'),
        ('6250', '安阳'),
        ('6260', '鹤壁'),
        ('6270', '新乡'),
        ('6280', '焦作'),
        ('6290', '濮阳'),
        ('6300', '许昌'),
        ('6310', '漯河'),
        ('6320', '三门峡'),
        ('6330', '南阳'),
        ('6340', '商丘'),
        ('6350', '信阳'),
        ('6360', '周口'),
        ('6370', '驻马店'),
        ('6380', '济源'),
        
        # 山东省
        ('6400', '山东'),
        ('6410', '济南'),
        ('6420', '青岛'),
        ('6430', '淄博'),
        ('6440', '枣庄'),
        ('6450', '东营'),
        ('6460', '烟台'),
        ('6470', '潍坊'),
        ('6480', '济宁'),
        ('6490', '泰安'),
        ('6500', '威海'),
        ('6510', '日照'),
        ('6520', '临沂'),
        ('6530', '德州'),
        ('6540', '聊城'),
        ('6550', '滨州'),
        ('6560', '菏泽'),
        
        # 四川省
        ('6600', '四川'),
        ('6610', '成都'),
        ('6620', '自贡'),
        ('6630', '攀枝花'),
        ('6640', '泸州'),
        ('6650', '德阳'),
        ('6660', '绵阳'),
        ('6670', '广元'),
        ('6680', '遂宁'),
        ('6690', '内江'),
        ('6700', '乐山'),
        ('6710', '南充'),
        ('6720', '眉山'),
        ('6730', '宜宾'),
        ('6740', '广安'),
        ('6750', '达州'),
        ('6760', '雅安'),
        ('6770', '巴中'),
        ('6780', '资阳'),
        ('6790', '阿坝'),
        ('6800', '甘孜'),
        ('6810', '凉山'),
        
        # 陕西省
        ('6900', '陕西'),
        ('6910', '西安'),
        ('6920', '铜川'),
        ('6930', '宝鸡'),
        ('6940', '咸阳'),
        ('6950', '渭南'),
        ('6960', '延安'),
        ('6970', '汉中'),
        ('6980', '榆林'),
        ('6990', '安康'),
        ('7000', '商洛'),
        
        # 辽宁省
        ('7100', '辽宁'),
        ('7110', '沈阳'),
        ('7120', '大连'),
        ('7130', '鞍山'),
        ('7140', '抚顺'),
        ('7150', '本溪'),
        ('7160', '丹东'),
        ('7170', '锦州'),
        ('7180', '营口'),
        ('7190', '阜新'),
        ('7200', '辽阳'),
        ('7210', '盘锦'),
        ('7220', '铁岭'),
        ('7230', '朝阳'),
        ('7240', '葫芦岛'),
        
        # 吉林省
        ('7300', '吉林'),
        ('7310', '长春'),
        ('7320', '吉林'),
        ('7330', '四平'),
        ('7340', '辽源'),
        ('7350', '通化'),
        ('7360', '白山'),
        ('7370', '松原'),
        ('7380', '白城'),
        ('7390', '延边'),
        
        # 黑龙江省
        ('7500', '黑龙江'),
        ('7510', '哈尔滨'),
        ('7520', '齐齐哈尔'),
        ('7530', '鸡西'),
        ('7540', '鹤岗'),
        ('7550', '双鸭山'),
        ('7560', '大庆'),
        ('7570', '伊春'),
        ('7580', '佳木斯'),
        ('7590', '七台河'),
        ('7600', '牡丹江'),
        ('7610', '黑河'),
        ('7620', '绥化'),
        ('7630', '大兴安岭'),
        
        # 河北省
        ('7700', '河北'),
        ('7710', '石家庄'),
        ('7720', '唐山'),
        ('7730', '秦皇岛'),
        ('7740', '邯郸'),
        ('7750', '邢台'),
        ('7760', '保定'),
        ('7770', '张家口'),
        ('7780', '承德'),
        ('7790', '沧州'),
        ('7800', '廊坊'),
        ('7810', '衡水'),
        
        # 山西省
        ('7900', '山西'),
        ('7910', '太原'),
        ('7920', '大同'),
        ('7930', '阳泉'),
        ('7940', '长治'),
        ('7950', '晋城'),
        ('7960', '朔州'),
        ('7970', '晋中'),
        ('7980', '运城'),
        ('7990', '忻州'),
        ('8000', '临汾'),
        ('8010', '吕梁'),
        
        # 安徽省
        ('8100', '安徽'),
        ('8110', '合肥'),
        ('8120', '芜湖'),
        ('8130', '蚌埠'),
        ('8140', '淮南'),
        ('8150', '马鞍山'),
        ('8160', '淮北'),
        ('8170', '铜陵'),
        ('8180', '安庆'),
        ('8190', '黄山'),
        ('8200', '滁州'),
        ('8210', '阜阳'),
        ('8220', '宿州'),
        ('8230', '六安'),
        ('8240', '亳州'),
        ('8250', '池州'),
        ('8260', '宣城'),
        
        # 江西省
        ('8300', '江西'),
        ('8310', '南昌'),
        ('8320', '景德镇'),
        ('8330', '萍乡'),
        ('8340', '九江'),
        ('8350', '新余'),
        ('8360', '鹰潭'),
        ('8370', '赣州'),
        ('8380', '吉安'),
        ('8390', '宜春'),
        ('8400', '抚州'),
        ('8410', '上饶'),
        
        # 广西壮族自治区
        ('8500', '广西'),
        ('8510', '南宁'),
        ('8520', '柳州'),
        ('8530', '桂林'),
        ('8540', '梧州'),
        ('8550', '北海'),
        ('8560', '防城港'),
        ('8570', '钦州'),
        ('8580', '贵港'),
        ('8590', '玉林'),
        ('8600', '百色'),
        ('8610', '贺州'),
        ('8620', '河池'),
        ('8630', '来宾'),
        ('8640', '崇左'),
        
        # 海南省
        ('8700', '海南'),
        ('8710', '海口'),
        ('8720', '三亚'),
        ('8730', '三沙'),
        ('8740', '儋州'),
        ('8750', '五指山'),
        ('8760', '琼海'),
        ('8770', '文昌'),
        ('8780', '万宁'),
        ('8790', '东方'),
        
        # 云南省
        ('8800', '云南'),
        ('8810', '昆明'),
        ('8820', '曲靖'),
        ('8830', '玉溪'),
        ('8840', '保山'),
        ('8850', '昭通'),
        ('8860', '丽江'),
        ('8870', '普洱'),
        ('8880', '临沧'),
        ('8890', '楚雄'),
        ('8900', '红河'),
        ('8910', '文山'),
        ('8920', '西双版纳'),
        ('8930', '大理'),
        ('8940', '德宏'),
        ('8950', '怒江'),
        ('8960', '迪庆'),
        
        # 贵州省
        ('9000', '贵州'),
        ('9010', '贵阳'),
        ('9020', '六盘水'),
        ('9030', '遵义'),
        ('9040', '安顺'),
        ('9050', '毕节'),
        ('9060', '铜仁'),
        ('9070', '黔西南'),
        ('9080', '黔东南'),
        ('9090', '黔南'),
        
        # 甘肃省
        ('9100', '甘肃'),
        ('9110', '兰州'),
        ('9120', '嘉峪关'),
        ('9130', '金昌'),
        ('9140', '白银'),
        ('9150', '天水'),
        ('9160', '武威'),
        ('9170', '张掖'),
        ('9180', '平凉'),
        ('9190', '酒泉'),
        ('9200', '庆阳'),
        ('9210', '定西'),
        ('9220', '陇南'),
        ('9230', '临夏'),
        ('9240', '甘南'),
        
        # 宁夏回族自治区
        ('9300', '宁夏'),
        ('9310', '银川'),
        ('9320', '石嘴山'),
        ('9330', '吴忠'),
        ('9340', '固原'),
        ('9350', '中卫'),
        
        # 青海省
        ('9400', '青海'),
        ('9410', '西宁'),
        ('9420', '海东'),
        ('9430', '海北'),
        ('9440', '黄南'),
        ('9450', '海南'),
        ('9460', '果洛'),
        ('9470', '玉树'),
        ('9480', '海西'),
        
        # 新疆维吾尔自治区
        ('9500', '新疆'),
        ('9510', '乌鲁木齐'),
        ('9520', '克拉玛依'),
        ('9530', '吐鲁番'),
        ('9540', '哈密'),
        ('9550', '昌吉'),
        ('9560', '博尔塔拉'),
        ('9570', '巴音郭楞'),
        ('9580', '阿克苏'),
        ('9590', '克孜勒苏'),
        ('9600', '喀什'),
        ('9610', '和田'),
        ('9620', '伊犁'),
        ('9630', '塔城'),
        ('9640', '阿勒泰'),
        
        # 西藏自治区
        ('9700', '西藏'),
        ('9710', '拉萨'),
        ('9720', '日喀则'),
        ('9730', '昌都'),
        ('9740', '林芝'),
        ('9750', '山南'),
        ('9760', '那曲'),
        ('9770', '阿里'),
        
        # 内蒙古自治区
        ('9800', '内蒙古'),
        ('9810', '呼和浩特'),
        ('9820', '包头'),
        ('9830', '乌海'),
        ('9840', '赤峰'),
        ('9850', '通辽'),
        ('9860', '鄂尔多斯'),
        ('9870', '呼伦贝尔'),
        ('9880', '巴彦淖尔'),
        ('9890', '乌兰察布'),
        ('9900', '兴安盟'),
        ('9910', '锡林郭勒'),
        ('9920', '阿拉善'),
        
        # 特别行政区
        ('9950', '香港'),
        ('9960', '澳门')
    ])

    
    conn.commit()
    conn.close()

class ProjectInfo:
    """项目信息元数据（集中管理所有项目相关信息）"""
    VERSION = "1.21.0"
    BUILD_DATE = "2025-05-19"
    AUTHOR = "杜玛"
    LICENSE = "MIT"
    COPYRIGHT = "© 永久 杜玛"
    URL = "https://github.com/duma520"
    MAINTAINER_EMAIL = "不提供"
    NAME = "电话号码管理系统"
    DESCRIPTION = "电话号码管理系统，支持固话和手机号码的管理、查询和分析。"


    @classmethod
    def get_metadata(cls) -> dict:
        """获取主要元数据字典"""
        return {
            'version': cls.VERSION,
            'author': cls.AUTHOR,
            'license': cls.LICENSE,
            'url': cls.URL
        }


    @classmethod
    def get_header(cls) -> str:
        """生成标准化的项目头信息"""
        return f"{cls.NAME} {cls.VERSION} | {cls.LICENSE} License | {cls.URL}"
    


# 马卡龙色系定义
class MacaronColors:
    # 粉色系
    SAKURA_PINK = QColor(255, 183, 206)  # 樱花粉
    ROSE_PINK = QColor(255, 154, 162)    # 玫瑰粉
    
    # 蓝色系
    SKY_BLUE = QColor(162, 225, 246)    # 天空蓝
    LILAC_MIST = QColor(230, 230, 250)   # 淡丁香
    
    # 绿色系
    MINT_GREEN = QColor(181, 234, 215)   # 薄荷绿
    APPLE_GREEN = QColor(212, 241, 199)  # 苹果绿
    
    # 黄色/橙色系
    LEMON_YELLOW = QColor(255, 234, 165) # 柠檬黄
    BUTTER_CREAM = QColor(255, 248, 184) # 奶油黄
    PEACH_ORANGE = QColor(255, 218, 193) # 蜜桃橙
    
    # 紫色系
    LAVENDER = QColor(199, 206, 234)     # 薰衣草紫
    TARO_PURPLE = QColor(216, 191, 216)  # 香芋紫
    
    # 中性色
    CARAMEL_CREAM = QColor(240, 230, 221) # 焦糖奶霜

# 主窗口类
class PhoneNumberManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(f"{ProjectInfo.NAME} {ProjectInfo.VERSION}")
        self.setWindowIcon(QIcon('icon.ico'))
        self.resize(800, 600)
        
        # 初始化数据库
        init_db()
        
        # 创建主控件
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)
        
        # 主布局
        self.main_layout = QVBoxLayout()
        self.main_widget.setLayout(self.main_layout)
        
        # 创建标签页
        self.tabs = QTabWidget()
        self.main_layout.addWidget(self.tabs)
        
        # 添加固话标签页
        self.create_landline_tab()
        
        # 添加手机标签页
        self.create_mobile_tab()
        
        # 添加查询标签页
        self.create_query_tab()
        
        # 加载数据
        self.load_landline_data()
        self.load_mobile_data()

        # 启用表格排序
        self.landline_table.setSortingEnabled(True)
        self.mobile_table.setSortingEnabled(True)
        self.query_table.setSortingEnabled(True)
        
        # 连接排序信号
        self.landline_table.horizontalHeader().sectionClicked.connect(self.sort_landline_table)
        self.mobile_table.horizontalHeader().sectionClicked.connect(self.sort_mobile_table)
        self.query_table.horizontalHeader().sectionClicked.connect(self.sort_query_table)
    
    def create_landline_tab(self):
        """创建固话号码管理标签页"""
        self.landline_tab = QWidget()
        self.tabs.addTab(self.landline_tab, "固话号码")
        
        layout = QVBoxLayout()
        self.landline_tab.setLayout(layout)
        
        # 输入区域
        input_layout = QHBoxLayout()
        layout.addLayout(input_layout)
        
        self.landline_input = QLineEdit()
        self.landline_input.setPlaceholderText("请输入固话号码（可带区号，如037165026940或87654321）或手机号码（11位）")
        self.landline_input.returnPressed.connect(self.add_phone_number)  # 修改连接的方法
        input_layout.addWidget(self.landline_input)
        
        self.add_landline_btn = QPushButton("添加")
        self.add_landline_btn.clicked.connect(self.add_phone_number)  # 修改连接的方法
        input_layout.addWidget(self.add_landline_btn)
        
        # 表格区域
        self.landline_table = QTableWidget()
        self.landline_table.setColumnCount(6)
        self.landline_table.setHorizontalHeaderLabels(["ID", "完整号码", "区号", "归属地", "用户号码", "登记时间"])
        self.landline_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.landline_table.setSelectionBehavior(QTableWidget.SelectRows)
        layout.addWidget(self.landline_table)
        
        # 操作按钮区域
        btn_layout = QHBoxLayout()
        layout.addLayout(btn_layout)
        
        self.delete_landline_btn = QPushButton("删除选中")
        self.delete_landline_btn.clicked.connect(self.delete_landline_number)
        btn_layout.addWidget(self.delete_landline_btn)
        
        self.refresh_landline_btn = QPushButton("刷新")
        self.refresh_landline_btn.clicked.connect(self.load_landline_data)
        btn_layout.addWidget(self.refresh_landline_btn)
    
    # 合并输入，删除这个多余的
    def create_mobile_tab(self):
        """创建手机号码管理标签页"""
        self.mobile_tab = QWidget()
        self.tabs.addTab(self.mobile_tab, "手机号码")
        
        layout = QVBoxLayout()
        self.mobile_tab.setLayout(layout)
        
        # 输入区域
        #input_layout = QHBoxLayout()
        #layout.addLayout(input_layout)
        
        #self.mobile_input = QLineEdit()
        #self.mobile_input.setPlaceholderText("请输入手机号码（如13012345678）")
        #self.mobile_input.returnPressed.connect(self.add_mobile_number)
        #input_layout.addWidget(self.mobile_input)
        
        #self.add_mobile_btn = QPushButton("添加")
        #self.add_mobile_btn.clicked.connect(self.add_mobile_number)
        #input_layout.addWidget(self.add_mobile_btn)
        
        # 表格区域
        self.mobile_table = QTableWidget()
        self.mobile_table.setColumnCount(8)
        self.mobile_table.setHorizontalHeaderLabels(["ID", "完整号码", "运营商前缀", "运营商", "地区编码", "归属地", "用户号码", "登记时间"])
        self.mobile_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.mobile_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.mobile_table.setSelectionMode(QTableWidget.SingleSelection)
        layout.addWidget(self.mobile_table)
        
        # 操作按钮区域
        btn_layout = QHBoxLayout()
        layout.addLayout(btn_layout)
        
        self.delete_mobile_btn = QPushButton("删除选中")
        self.delete_mobile_btn.clicked.connect(self.delete_mobile_number)
        btn_layout.addWidget(self.delete_mobile_btn)
        
        self.refresh_mobile_btn = QPushButton("刷新")
        self.refresh_mobile_btn.clicked.connect(self.load_mobile_data)
        btn_layout.addWidget(self.refresh_mobile_btn)
    
    def create_query_tab(self):
        """创建查询标签页"""
        self.query_tab = QWidget()
        self.tabs.addTab(self.query_tab, "号码查询")
        
        layout = QVBoxLayout()
        self.query_tab.setLayout(layout)
        
        # 查询条件区域
        query_cond_layout = QHBoxLayout()
        layout.addLayout(query_cond_layout)
        
        self.query_type = QComboBox()
        self.query_type.addItems(["所有号码", "固话号码", "手机号码"])
        query_cond_layout.addWidget(self.query_type)
        
        self.query_keyword = QLineEdit()
        self.query_keyword.setPlaceholderText("输入号码、区号、归属地等关键词")
        self.query_keyword.returnPressed.connect(self.query_numbers)
        query_cond_layout.addWidget(self.query_keyword)
        
        self.query_btn = QPushButton("查询")
        self.query_btn.clicked.connect(self.query_numbers)
        query_cond_layout.addWidget(self.query_btn)

        # 添加详细解析按钮
        self.detail_btn = QPushButton("详细解析")
        self.detail_btn.clicked.connect(self.show_number_details)
        query_cond_layout.addWidget(self.detail_btn)

        # 查询结果表格
        self.query_table = QTableWidget()
        self.query_table.setColumnCount(9)
        self.query_table.setHorizontalHeaderLabels(["类型", "ID", "完整号码", "区号/运营商", "归属地/运营商", "地区编码", "归属地", "用户号码", "登记时间"])
        self.query_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.query_table.setSelectionBehavior(QTableWidget.SelectRows)
        layout.addWidget(self.query_table)
    
    def add_landline_number(self):
        """添加固话号码"""
        number = self.landline_input.text().strip()
        if not number:
            self.show_notification("警告", "请输入固话号码！", False)
            return
        
        # 验证是否为纯数字
        if not number.isdigit():
            self.show_notification("警告", "固话号码必须全为数字！", False)
            return
            
        # 分析号码
        area_code = None
        area_location = "无"
        user_number = number
        
        # 检查是否有区号（3-4位区号）
        if len(number) >= 7:  # 至少7位才尝试解析区号
            # 先尝试4位区号（因为4位区号更具体，避免误判）
            if len(number) >= 8:  # 4位区号+至少4位用户号码
                possible_code = number[:4]
                location = self.get_area_location(possible_code)
                if location != "未知":
                    area_code = possible_code
                    area_location = location
                    user_number = number[4:]
                else:
                    # 再尝试3位区号
                    possible_code = number[:3]
                    location = self.get_area_location(possible_code)
                    if location != "未知":
                        area_code = possible_code
                        area_location = location
                        user_number = number[3:]
        
        # 验证用户号码长度（放宽限制）
        if len(user_number) < 4:
            self.show_notification("警告", "固话号码用户部分长度至少需要4位！", False)
            return
        
        # 检查号码是否已存在
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT id FROM landline_numbers WHERE full_number = ?', (number,))
            if cursor.fetchone():
                self.show_notification("提示", "该固话号码已存在，无需重复添加！", False)
                self.landline_input.clear()  # 新增：清空输入框
                return
        
            # 保存到数据库
            cursor.execute('''
            INSERT INTO landline_numbers (full_number, area_code, area_location, user_number)
            VALUES (?, ?, ?, ?)
            ''', (number, area_code, area_location, user_number))
            conn.commit()
            self.show_notification("成功", "固话号码添加成功！")
            self.landline_input.clear()
            self.load_landline_data()
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        finally:
            conn.close()
    
    def add_mobile_number(self):
        """添加手机号码"""
        number = self.mobile_input.text().strip()
        if not number:
            self.show_notification("警告", "请输入手机号码！", False)
            return
        
        # 1. 先检查本地数据库是否有该号段记录
        operator_prefix = number[:3]
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = ?', (operator_prefix,))
            result = cursor.fetchone()
            
            if result:  # 本地数据库有记录
                operator_name = result[0]
                area_location = "全国"  # 默认值，可以从数据库获取更具体信息
                
                # 检查号码是否已存在
                cursor.execute('SELECT id FROM mobile_numbers WHERE full_number = ?', (number,))
                if cursor.fetchone():
                    self.show_notification("提示", "该手机号码已存在，无需重复添加！", False)
                    return
                    
                # 保存到数据库
                area_code = number[3:7]
                user_number = number[7:]
                cursor.execute('''
                INSERT INTO mobile_numbers 
                (full_number, operator_prefix, operator_name, area_code, area_location, user_number)
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (number, operator_prefix, operator_name, area_code, area_location, user_number))
                conn.commit()
                self.show_notification("成功", "手机号码添加成功！(使用本地数据库)")
                self.mobile_input.clear()
                self.load_mobile_data()
                return
                
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
            conn.close()
            return
        
        conn.close()
        
        # 2. 本地数据库没有记录，使用第三方库查询
        print(f"[DEBUG] 本地数据库无记录，开始使用第三方库解析号码: {number}")
        
        # 使用phonenumbers库验证号码
        try:
            parsed = phonenumbers.parse(number, "CN")
            if not phonenumbers.is_valid_number(parsed):
                self.show_notification("警告", "无效的手机号码！", False)
                return
        except Exception as e:
            self.show_notification("警告", f"手机号码格式错误: {str(e)}", False)
            return
        
        # 使用多个库解析号码信息
        phone_info = self.parse_phone_number(number)
        phone_pkg_info = self.parse_phone_package(number)
        
        # 合并解析结果
        operator_name = phone_info.get('carrier', '未知运营商')
        area_location = phone_info.get('region', '未知地区')
        
        # 如果phone库有更详细的信息，优先使用
        if isinstance(phone_pkg_info, dict) and not phone_pkg_info.get('error'):
            operator_name = phone_pkg_info.get('operator', operator_name)
            area_location = phone_pkg_info.get('province', area_location)
        
        # 保存到数据库
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            # 检查号码是否已存在
            cursor.execute('SELECT id FROM mobile_numbers WHERE full_number = ?', (number,))
            if cursor.fetchone():
                self.show_notification("提示", "该手机号码已存在，无需重复添加！", False)
                return
            
            # 保存到数据库
            area_code = number[3:7]
            user_number = number[7:]
            cursor.execute('''
            INSERT INTO mobile_numbers 
            (full_number, operator_prefix, operator_name, area_code, area_location, user_number)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (number, operator_prefix, operator_name, area_code, area_location, user_number))
            
            # 同时将新发现的号段添加到运营商表中
            cursor.execute('''
            INSERT OR IGNORE INTO mobile_operators (prefix, operator, province)
            VALUES (?, ?, ?)
            ''', (operator_prefix, operator_name, area_location.split('省')[0] if '省' in area_location else area_location))
            
            conn.commit()
            self.show_notification("成功", "手机号码添加成功！(使用第三方库)")
            self.mobile_input.clear()
            self.load_mobile_data()
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        finally:
            conn.close()


    
    def delete_landline_number(self):
        """删除选中的固话号码"""
        selected_items = self.landline_table.selectedItems()
        if not selected_items:
            self.show_notification("警告", "请先选择要删除的记录！", False)
            return
        
        try:
            # 获取选中行的ID - 防御性编程修改
            row = selected_items[0].row()
            id_item = self.landline_table.item(row, 0)
            
            # 添加空值检查
            if id_item is None:
                self.show_notification("错误", "无法获取记录ID，请选择有效的行！", False)
                return
                
            number_id = id_item.text()
            
            # 确认删除
            reply = QMessageBox.question(self, '确认', '确定要删除这条记录吗？', 
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                conn = sqlite3.connect('phone_numbers.db')
                cursor = conn.cursor()
                try:
                    cursor.execute('DELETE FROM landline_numbers WHERE id = ?', (number_id,))
                    conn.commit()
                    self.load_landline_data()
                    self.show_notification("成功", "固话号码删除成功！")
                except sqlite3.Error as e:
                    self.show_notification("错误", f"数据库错误: {str(e)}", False)
                finally:
                    conn.close()
        except Exception as e:
            self.show_notification("错误", f"删除操作失败: {str(e)}", False)

    
    def delete_mobile_number(self):
        """删除选中的手机号码"""
        try:
            selected_items = self.mobile_table.selectedItems()
            if not selected_items:
                self.show_notification("警告", "请先选择要删除的记录！", False)
                return
            
            # 获取所有选中行的行号
            selected_rows = {item.row() for item in selected_items}
            if len(selected_rows) != 1:
                self.show_notification("警告", "请选择单一行进行删除！", False)
                return
                
            row = selected_rows.pop()
            
            # 防御性检查：确保行号有效
            if row < 0 or row >= self.mobile_table.rowCount():
                self.show_notification("错误", "无效的行选择！", False)
                return
                
            # 获取ID列的项目
            id_item = self.mobile_table.item(row, 0)
            if id_item is None:
                self.show_notification("错误", "无法获取记录ID，表格数据可能未正确加载！", False)
                return
                
            number_id = id_item.text()
            if not number_id.isdigit():
                self.show_notification("错误", "无效的记录ID格式！", False)
                return
                
            # 确认删除
            reply = QMessageBox.question(
                self, '确认', 
                f'确定要删除ID为 {number_id} 的记录吗？', 
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                conn = None
                try:
                    conn = sqlite3.connect('phone_numbers.db')
                    cursor = conn.cursor()
                    
                    # 先检查记录是否存在
                    cursor.execute('SELECT id FROM mobile_numbers WHERE id = ?', (number_id,))
                    if not cursor.fetchone():
                        self.show_notification("错误", "要删除的记录不存在！", False)
                        return
                        
                    # 执行删除
                    cursor.execute('DELETE FROM mobile_numbers WHERE id = ?', (number_id,))
                    conn.commit()
                    
                    # 刷新表格
                    self.load_mobile_data()
                    self.show_notification("成功", "手机号码删除成功！")
                    
                except sqlite3.Error as e:
                    if conn:
                        conn.rollback()
                    self.show_notification("错误", f"数据库错误: {str(e)}", False)
                finally:
                    if conn:
                        conn.close()
                        
        except Exception as e:
            self.show_notification("错误", f"删除操作失败: {str(e)}", False)



    
    def load_landline_data(self):
        """加载固话号码数据"""
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT id, full_number, area_code, area_location, user_number, registration_time FROM landline_numbers ORDER BY registration_time DESC')
            data = cursor.fetchall()

            # 临时禁用排序，避免重复触发
            self.landline_table.setSortingEnabled(False)

            self.landline_table.setRowCount(len(data))
            for row_idx, row_data in enumerate(data):
                for col_idx, col_data in enumerate(row_data):
                    item = QTableWidgetItem(str(col_data))
                    item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                
                    # 为数字列设置特殊数据，以便正确排序
                    if col_idx in (0,):  # ID列
                        item.setData(Qt.DisplayRole, int(col_data) if col_data else item.setData(Qt.DisplayRole, 0))
                    elif col_idx == 5:  # 时间列
                        item.setData(Qt.DisplayRole, QDateTime.fromString(col_data, "yyyy-MM-dd HH:mm:ss"))
                    else:
                        item.setData(Qt.DisplayRole, col_data)

                    self.landline_table.setItem(row_idx, col_idx, item)

            # 重新启用排序
            self.landline_table.setSortingEnabled(True)

        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        finally:
            conn.close()
    
    def load_mobile_data(self):
        """加载手机号码数据"""
        conn = None
        try:
            # 临时禁用排序，避免重复触发
            self.mobile_table.setSortingEnabled(False)
            self.mobile_table.clearContents()
            
            conn = sqlite3.connect('phone_numbers.db')
            cursor = conn.cursor()
            
            cursor.execute('''
            SELECT id, full_number, operator_prefix, operator_name, 
                area_code, area_location, user_number, registration_time 
            FROM mobile_numbers 
            ORDER BY registration_time DESC
            ''')
            data = cursor.fetchall()
            
            # 设置行数
            self.mobile_table.setRowCount(len(data))
            
            # 填充数据
            for row_idx, row_data in enumerate(data):
                for col_idx, col_data in enumerate(row_data):
                    # 确保数据不为None
                    display_text = str(col_data) if col_data is not None else ""
                    
                    item = QTableWidgetItem(display_text)
                    item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                    
                    # 为数字列设置特殊数据
                    if col_idx == 0:  # ID列
                        try:
                            item.setData(Qt.DisplayRole, int(col_data) if col_data else 0)
                        except:
                            item.setData(Qt.DisplayRole, 0)
                    elif col_idx == 7:  # 时间列
                        try:
                            item.setData(Qt.DisplayRole, QDateTime.fromString(col_data, "yyyy-MM-dd HH:mm:ss"))
                        except:
                            item.setData(Qt.DisplayRole, QDateTime.currentDateTime())
                    
                    self.mobile_table.setItem(row_idx, col_idx, item)
                    
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        except Exception as e:
            self.show_notification("错误", f"加载数据失败: {str(e)}", False)
        finally:
            if conn:
                conn.close()
            # 重新启用排序
            self.mobile_table.setSortingEnabled(True)

    
    def query_numbers(self):
        """查询号码"""
        try:
            keyword = self.query_keyword.text().strip()
            query_type = self.query_type.currentText()

            # 先检查是否是特殊号码
            special_location = self.is_special_number(keyword)
            if special_location:
                # 如果是特殊号码，直接返回结果
                data = [('固话', None, keyword, keyword, special_location, '', '', '', QDateTime.currentDateTime().toString("yyyy-MM-dd HH:mm:ss"))]
                self.display_query_results(data)
                return

            # 先查询本地数据库
            conn = sqlite3.connect('phone_numbers.db')
            cursor = conn.cursor()
            
            data = []
            if query_type in ["所有号码", "固话号码"]:
                cursor.execute('''
                SELECT '固话' as type, id, full_number, area_code, area_location, 
                    '' as area_code2, '' as area_location2, user_number, registration_time 
                FROM landline_numbers 
                WHERE full_number LIKE ? OR area_code LIKE ? OR area_location LIKE ? OR user_number LIKE ?
                ''', (f'%{keyword}%', f'%{keyword}%', f'%{keyword}%', f'%{keyword}%'))
                data.extend(cursor.fetchall())
            
            if query_type in ["所有号码", "手机号码"]:
                cursor.execute('''
                SELECT '手机' as type, id, full_number, operator_prefix, operator_name, 
                    area_code, area_location, user_number, registration_time 
                FROM mobile_numbers 
                WHERE full_number LIKE ? OR operator_prefix LIKE ? OR operator_name LIKE ? 
                    OR area_code LIKE ? OR area_location LIKE ? OR user_number LIKE ?
                ''', (f'%{keyword}%', f'%{keyword}%', f'%{keyword}%', 
                    f'%{keyword}%', f'%{keyword}%', f'%{keyword}%'))
                data.extend(cursor.fetchall())
            
            conn.close()
            
            # 如果没有本地结果，且是手机号码查询，尝试使用库实时解析
            if not data and query_type in ["所有号码", "手机号码"] and len(keyword) >= 7 and keyword.isdigit():
                # 先检查本地是否有该号段记录
                operator_prefix = keyword[:3]
                conn = sqlite3.connect('phone_numbers.db')
                cursor = conn.cursor()
                cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = ?', (operator_prefix,))
                result = cursor.fetchone()
                conn.close()
                
                if result:  # 本地有记录但没找到具体号码
                    operator_name = result[0]
                    area_code = keyword[3:7]
                    user_number = keyword[7:]
                    data.append(('手机', None, keyword, operator_prefix, operator_name, 
                                area_code, '未知地区', user_number, QDateTime.currentDateTime().toString("yyyy-MM-dd HH:mm:ss")))
                else:  # 本地无记录，使用第三方库
                    try:
                        # 使用phonenumbers判断号码类型
                        parsed = phonenumbers.parse(keyword, "CN")
                        if phonenumbers.is_valid_number(parsed):
                            phone_info = self.parse_phone_number(keyword)
                            phone_pkg_info = self.parse_phone_package(keyword)
                            
                            operator = phone_info.get('carrier', '未知运营商')
                            location = phone_info.get('region', '未知地区')
                            
                            if isinstance(phone_pkg_info, dict) and not phone_pkg_info.get('error'):
                                operator = phone_pkg_info.get('operator', operator)
                                location = phone_pkg_info.get('province', location)
                            
                            data.append(('手机', None, keyword, keyword[:3], operator, 
                                    keyword[3:7], location, keyword[7:], QDateTime.currentDateTime().toString("yyyy-MM-dd HH:mm:ss")))
                    except:
                        pass
            
            # 显示结果
            self.display_query_results(data)
            
        except Exception as e:
            self.show_notification("错误", f"查询失败: {str(e)}", False)


    def display_query_results(self, data):
        """显示查询结果"""
        self.query_table.setSortingEnabled(False)
        self.query_table.setRowCount(len(data))
        
        for row_idx, row_data in enumerate(data):
            for col_idx, col_data in enumerate(row_data):
                item = QTableWidgetItem(str(col_data))
                item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                
                if col_idx == 1 and col_data is None:  # ID为空表示实时查询结果
                    item.setText("(实时)")
                
                self.query_table.setItem(row_idx, col_idx, item)
        
        self.query_table.setSortingEnabled(True)
        self.query_table.sortByColumn(8, Qt.DescendingOrder)



    
    def get_area_location(self, code):
        """获取区号对应的归属地"""
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT location FROM area_codes WHERE code = ?', (code,))
            result = cursor.fetchone()
            return result[0] if result else "未知"
        except:
            return "未知"
        finally:
            conn.close()
    
    def get_operator_info(self, prefix):
        """获取手机运营商信息"""
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = ?', (prefix,))
            result = cursor.fetchone()
            return result[0] if result else "未知运营商"
        except:
            return "未知运营商"
        finally:
            conn.close()
    
    def get_mobile_area_location(self, code):
        """获取手机地区编码对应的归属地"""
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT location FROM mobile_area_codes WHERE code = ?', (code,))
            result = cursor.fetchone()
            return result[0] if result else "未知地区"
        except:
            return "未知地区"
        finally:
            conn.close()

    def show_notification(self, title, message, is_success=True):
        """显示任务栏通知"""
        icon = self.windowIcon()
        if is_success:
            message = f"✅ {message}"
        elif title.lower() == "警告":
            message = f"⚠️ {message}"
        else:
            message = f"❌ {message}"
        
        # 显示任务栏通知
        self.statusBar().showMessage(message, 5000)  # 显示5秒
        # 同时显示气泡通知（如果系统支持）
        if hasattr(self, 'showMessage'):
            self.showMessage(title, message, icon, 5000)

    def parse_phone_number(self, number):
        """使用phonenumbers库解析电话号码"""
        try:
            parsed = phonenumbers.parse(number, "CN")
            return {
                'valid': phonenumbers.is_valid_number(parsed),
                'type': phonenumbers.number_type(parsed),
                'carrier': carrier.name_for_number(parsed, "zh"),
                'region': geocoder.description_for_number(parsed, "zh"),
                'timezone': timezone.time_zones_for_number(parsed),
                'national': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.NATIONAL),
                'international': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL),
                'e164': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.E164)
            }
        except Exception as e:
            return {'error': str(e)}
    def parse_phone_iso3166(self, number):
        """使用phone-iso3166库解析电话号码"""
        try:
            # 确保号码有国际前缀
            if not number.startswith('+'):
                number = '+86' + number.lstrip('86')
            return phone_country(number)
        except Exception as e:
            return {'error': str(e)}
            
    def parse_phone_package(self, number):
        """兼容处理国际格式的phone库解析"""
        try:
            # 去除+86前缀
            clean_number = number.replace('+86', '').lstrip('86')
            print(f"[DEBUG] 准备使用phone库解析的号码: {clean_number}")  # 添加调试信息
            
            p = Phone()
            result = p.find(clean_number)  # 传入纯11位号码
            print(f"[DEBUG] phone库原始解析结果: {result}")  # 添加调试信息
            
            # 验证结果有效性
            if not result or 'error' in result:
                raise ValueError(f"phone库无法解析: {clean_number}")
                
            return {
                'operator': result.get('operator', '未知'),
                'province': result.get('province', '未知'),
                'city': result.get('city', '未知'),
                'source': 'phone'  # 标记数据来源
            }
            
        except Exception as e:
            print(f"[ERROR] phone库解析失败: {str(e)}")  # 修改为ERROR级别
            print(f"[WARN] phone库解析失败: {str(e)}")
            return {'error': str(e)}  # 返回错误信息
            # return None  # 显式返回None便于后续处理



    def show_number_details(self):
        """显示号码的详细解析信息"""
        selected_items = self.query_table.selectedItems()
        if not selected_items:
            self.show_notification("警告", "请先选择要解析的号码！", False)
            return
        
        try:
            # 获取选中行的号码
            row = selected_items[0].row()
            number_item = self.query_table.item(row, 2)
            number = number_item.text()
            
            # 使用三个库解析号码
            print("\n=== 开始解析号码 ===")
            print(f"要解析的号码: {number}")

            print("\n[phonenumbers 解析结果]")
            phone_info = self.parse_phone_number(number)
            print(f"解析结果: {phone_info}")

            print("\n[phone-iso3166 解析结果]")
            iso_info = self.parse_phone_iso3166(number)
            print(f"解析结果: {iso_info}")

            print("\n[phone 解析结果]")
            phone_pkg_info = self.parse_phone_package(number)
            print(f"解析结果: {phone_pkg_info}")

            print("\n=== 解析完成 ===\n")
            
            # 构建详细信息文本
            details = f"📱 号码: {number}\n\n"
            
            # phonenumbers 解析结果
            details += "=== phonenumbers 解析结果 ===\n"
            if 'error' in phone_info:
                details += f"❌ 错误: {phone_info['error']}\n"
            else:
                
                details += f"✅ 有效性: {'有效' if phone_info['valid'] else '无效'}\n"
                details += f"📞 类型: {self.get_phone_type_name(phone_info['type'])}\n"
                details += f"🏢 运营商: {phone_info.get('carrier', '未知')}\n"
                details += f"🌍 地区: {phone_info.get('region', '未知')}\n"
                details += f"⏰ 时区: {', '.join(phone_info.get('timezone', []))}\n"
                details += f"🇨🇳 国内格式: {phone_info.get('national', '未知')}\n"
                details += f"🌐 国际格式: {phone_info.get('international', '未知')}\n"
                details += f"🔢 E.164格式: {phone_info.get('e164', '未知')}\n"
            
            # phone-iso3166 解析结果
            details += "\n=== phone-iso3166 解析结果 ===\n"
            
            if isinstance(iso_info, dict) and 'error' in iso_info:
                details += f"❌ 错误: {iso_info['error']}\n"
            else:
                details += f"🇺🇳 国家代码: {iso_info}\n"
            
            # phone 解析结果
            details += "\n=== phone 解析结果 ===\n"
            if isinstance(phone_pkg_info, dict) and 'error' in phone_pkg_info:
                details += f"❌ 错误: {phone_pkg_info['error']}\n"
            else:
                
                details += f"🏢 运营商: {phone_pkg_info.get('operator', '未知')}\n"
                details += f"📍 省份: {phone_pkg_info.get('province', '未知')}\n"
                details += f"🏙️ 城市: {phone_pkg_info.get('city', '未知')}\n"
                details += f"✉️ 邮编: {phone_pkg_info.get('zip_code', '未知')}\n"
                details += f"🔢 区号: {phone_pkg_info.get('area_code', '未知')}\n"
                details += f"💳 卡类型: {phone_pkg_info.get('card_type', '未知')}\n"
            
            # 显示对话框
            msg = QMessageBox()
            msg.setWindowTitle(f"号码详细解析 - {number}")
            msg.setText(details)
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
            
        except Exception as e:
            self.show_notification("错误", f"解析失败: {str(e)}", False)

    def get_phone_type_name(self, num_type):
        """将号码类型转换为可读名称"""
        type_names = {
            0: "固定电话",
            1: "手机",
            2: "固定电话或手机",
            3: "免费电话",
            4: "付费电话",
            5: "共享成本电话",
            6: "VoIP",
            7: "个人号码",
            8: "传呼机",
            9: "通用号码",
            10: "未知"
        }
        return type_names.get(num_type, "未知")


    def sort_landline_table(self, logicalIndex):
        """固话表格排序"""
        self.landline_table.sortByColumn(logicalIndex, self.landline_table.horizontalHeader().sortIndicatorOrder())

    def sort_mobile_table(self, logicalIndex):
        """手机表格排序"""
        self.mobile_table.sortByColumn(logicalIndex, self.mobile_table.horizontalHeader().sortIndicatorOrder())

    def sort_query_table(self, logicalIndex):
        """查询表格排序"""
        self.query_table.sortByColumn(logicalIndex, self.query_table.horizontalHeader().sortIndicatorOrder())

    def add_phone_number(self):
        """添加电话号码，自动判断是手机还是固话"""
        number = self.landline_input.text().strip()
        if not number:
            self.show_notification("警告", "请输入电话号码！", False)
            return
        
        # 验证是否为纯数字
        if not number.isdigit():
            self.show_notification("警告", "电话号码必须全为数字！", False)
            return
        
        # 更精确的判断逻辑：11位且以1开头才是手机号码
        if len(number) == 11 and number.startswith('1'):
            # 处理手机号码
            self.add_mobile_number_auto(number)
        else:
            # 处理固话号码
            self.add_landline_number_auto(number)

    def add_landline_number_auto(self, number):
        """添加固话号码（自动调用版本）"""
        # 先检查是否是特殊号码
        special_location = self.is_special_number(number)
        if special_location:
            # 处理特殊号码
            conn = sqlite3.connect('phone_numbers.db')
            cursor = conn.cursor()
            try:
                cursor.execute('SELECT id FROM landline_numbers WHERE full_number = ?', (number,))
                if cursor.fetchone():
                    self.show_notification("提示", "该号码已存在，无需重复添加！", False)
                    return
                
                # 保存特殊号码到数据库
                cursor.execute('''
                INSERT INTO landline_numbers (full_number, area_code, area_location, user_number)
                VALUES (?, ?, ?, ?)
                ''', (number, number, special_location, ''))
                conn.commit()
                self.show_notification("成功", "特殊号码添加成功！")
                self.landline_input.clear()
                self.load_landline_data()
                return
            except sqlite3.Error as e:
                self.show_notification("错误", f"数据库错误: {str(e)}", False)
                return
            finally:
                conn.close()

        # 原add_landline_number的内容，但去掉获取输入的代码
        # 分析号码
        area_code = None
        area_location = "无"
        user_number = number
        
        # 检查是否有区号（3-4位区号）
        if len(number) >= 7:  # 至少7位才尝试解析区号
            # 先尝试4位区号（因为4位区号更具体，避免误判）
            if len(number) >= 8:  # 4位区号+至少4位用户号码
                possible_code = number[:4]
                location = self.get_area_location(possible_code)
                if location != "未知":
                    area_code = possible_code
                    area_location = location
                    user_number = number[4:]
                else:
                    # 再尝试3位区号
                    possible_code = number[:3]
                    location = self.get_area_location(possible_code)
                    if location != "未知":
                        area_code = possible_code
                        area_location = location
                        user_number = number[3:]
        
        # 验证用户号码长度（放宽限制）
        if len(user_number) < 4:
            self.show_notification("警告", "固话号码用户部分长度至少需要4位！", False)
            return
        
        # 检查号码是否已存在
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT id FROM landline_numbers WHERE full_number = ?', (number,))
            if cursor.fetchone():
                self.show_notification("提示", "该固话号码已存在，无需重复添加！", False)
                return
        
            # 保存到数据库
            cursor.execute('''
            INSERT INTO landline_numbers (full_number, area_code, area_location, user_number)
            VALUES (?, ?, ?, ?)
            ''', (number, area_code, area_location, user_number))
            conn.commit()
            self.show_notification("成功", "固话号码添加成功！")
            self.landline_input.clear()
            self.load_landline_data()
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        finally:
            conn.close()

    def add_mobile_number_auto(self, number):
        """添加手机号码（自动调用版本）"""
        # 先检查是否是特殊号码
        special_location = self.is_special_number(number)
        if special_location:
            # 处理特殊号码
            conn = sqlite3.connect('phone_numbers.db')
            cursor = conn.cursor()
            try:
                cursor.execute('SELECT id FROM mobile_numbers WHERE full_number = ?', (number,))
                if cursor.fetchone():
                    self.show_notification("提示", "该号码已存在，无需重复添加！", False)
                    self.landline_input.clear()  # 新增：清空输入框
                    return
                
                # 保存特殊号码到数据库
                cursor.execute('''
                INSERT INTO mobile_numbers 
                (full_number, operator_prefix, operator_name, area_code, area_location, user_number)
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (number, number[:3], special_location, '', special_location, ''))
                conn.commit()
                self.show_notification("成功", "特殊号码添加成功！")
                self.landline_input.clear()
                self.load_mobile_data()
                return
            except sqlite3.Error as e:
                self.show_notification("错误", f"数据库错误: {str(e)}", False)
                return
            finally:
                conn.close()

        # 1. 先检查本地数据库是否有该号段记录
        operator_prefix = number[:3]
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT operator FROM mobile_operators WHERE prefix = ?', (operator_prefix,))
            result = cursor.fetchone()
            
            if result:  # 本地数据库有记录
                operator_name = result[0]
                area_location = "全国"  # 默认值，可以从数据库获取更具体信息
                
                # 检查号码是否已存在
                cursor.execute('SELECT id FROM mobile_numbers WHERE full_number = ?', (number,))
                if cursor.fetchone():
                    self.show_notification("提示", "该手机号码已存在，无需重复添加！", False)
                    self.landline_input.clear()  # 新增：清空输入框
                    return
                    
                # 保存到数据库
                area_code = number[3:7]
                user_number = number[7:]
                cursor.execute('''
                INSERT INTO mobile_numbers 
                (full_number, operator_prefix, operator_name, area_code, area_location, user_number)
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (number, operator_prefix, operator_name, area_code, area_location, user_number))
                conn.commit()
                self.show_notification("成功", "手机号码添加成功！(使用本地数据库)")
                self.landline_input.clear()
                self.load_mobile_data()
                return
                
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
            conn.close()
            return
        
        conn.close()
        
        # 2. 本地数据库没有记录，使用第三方库查询
        print(f"[DEBUG] 本地数据库无记录，开始使用第三方库解析号码: {number}")
        
        # 使用phonenumbers库验证号码
        try:
            parsed = phonenumbers.parse(number, "CN")
            if not phonenumbers.is_valid_number(parsed):
                self.show_notification("警告", "无效的手机号码！", False)
                return
        except Exception as e:
            self.show_notification("警告", f"手机号码格式错误: {str(e)}", False)
            return
        
        # 使用多个库解析号码信息
        phone_info = self.parse_phone_number(number)
        phone_pkg_info = self.parse_phone_package(number)
        
        # 合并解析结果
        operator_name = phone_info.get('carrier', '未知运营商')
        area_location = phone_info.get('region', '未知地区')
        
        # 如果phone库有更详细的信息，优先使用
        if isinstance(phone_pkg_info, dict) and not phone_pkg_info.get('error'):
            operator_name = phone_pkg_info.get('operator', operator_name)
            area_location = phone_pkg_info.get('province', area_location)
        
        # 保存到数据库
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            # 检查号码是否已存在
            cursor.execute('SELECT id FROM mobile_numbers WHERE full_number = ?', (number,))
            if cursor.fetchone():
                self.show_notification("提示", "该手机号码已存在，无需重复添加！", False)
                self.landline_input.clear()  # 新增：清空输入框
                return
            
            # 保存到数据库
            area_code = number[3:7]
            user_number = number[7:]
            cursor.execute('''
            INSERT INTO mobile_numbers 
            (full_number, operator_prefix, operator_name, area_code, area_location, user_number)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (number, operator_prefix, operator_name, area_code, area_location, user_number))
            
            # 同时将新发现的号段添加到运营商表中
            cursor.execute('''
            INSERT OR IGNORE INTO mobile_operators (prefix, operator, province)
            VALUES (?, ?, ?)
            ''', (operator_prefix, operator_name, area_location.split('省')[0] if '省' in area_location else area_location))
            
            conn.commit()
            self.show_notification("成功", "手机号码添加成功！(使用第三方库)")
            self.landline_input.clear()
            self.load_mobile_data()
        except sqlite3.Error as e:
            self.show_notification("错误", f"数据库错误: {str(e)}", False)
        finally:
            conn.close()


    def is_special_number(self, number):
        """检查是否是特殊号码"""
        conn = sqlite3.connect('phone_numbers.db')
        cursor = conn.cursor()
        try:
            # 检查是否是特殊号码（如110、95588等）
            cursor.execute('SELECT location FROM area_codes WHERE code = ?', (number,))
            result = cursor.fetchone()
            return result[0] if result else None
        except:
            return None
        finally:
            conn.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = PhoneNumberManager()
    window.show()
    sys.exit(app.exec_())